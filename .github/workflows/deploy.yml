name: CI/CD GitHub Actions & Docker with AWS CodeDeploy

on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        

    - name: Create application configuration
      run: |
        mkdir -p ./src/main/resources
        echo "${{ secrets.YML }}" > ./src/main/resources/application.yml

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew clean build -x test

    - name: Docker Hub Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker build and push
      run: |
        docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}:${{ github.sha }} .
        docker push ${{ secrets.DOCKER_REPO }}:${{ github.sha }}

    # - name: Upload Docker Compose and config to S3
    #   run: |
    #     aws s3 cp docker-compose.yml s3://${{ secrets.S3_BUCKET }}/docker-compose-${{ github.sha }}.yml 
    #     aws s3 cp ./src/main/resources/application.yml s3://${{ secrets.S3_BUCKET }}/application-${{ github.ref }}.yml 
    - name: Package and upload deployment to S3
      run: |
        # 모든 필요 파일을 포함하여 ZIP 파일 생성
        zip -r deployment-package.zip Dockerfile docker-compose.yml appspec.yml ./src/main/resources/application.yml build/libs/*.jar scripts/
        # 생성된 ZIP 파일을 S3로 업로드
        aws s3 cp deployment-package.zip s3://${{ secrets.S3_BUCKET }}/deployment-package-${{ github.sha }}.zip

    - name: Deploy using AWS CodeDeploy
      run: |
        aws deploy create-deployment --application-name ${{ secrets.CODEDEPLOY_APP_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ secrets.DEPLOYMENT_GROUP_NAME }} \
          --description "Deploy ${GITHUB_SHA} to EC2" \
          --s3-location bucket=${{ secrets.S3_BUCKET }},key=deployment-package-${{ github.sha }}.zip,bundleType=zip
