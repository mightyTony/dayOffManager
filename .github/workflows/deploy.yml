name: Java CI 

# main 브랜치에 push, pr 시 동작 
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# 환경 변수 설정
env:
  # s3 이름
  S3_BUCKET_NAME: s3-dayoffmanager/dev-cicd
  # Codedeploy App 이름 
  CODE_DEPLOY_APPLICATION_NAME: Codedeploy-dayoffmanager
  # Codedeploy Group 이름 
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: dpg-dayoffmanager

# 워크 플로우가 깃 레포에 대한 권한을 읽기만 가능하게 설정
#permissions:
#  contents: read

# 워크 플로우에서 할 작업 정의 한다.
jobs:
  # 깃허브 액션을 빌드하는 Github 클라우드 OS 환경 정의 
  build:
    runs-on: ubuntu-latest

  # 각 스텝 정의 
    steps:
      # 깃허브에서 제공하는 checkout 액션 사용
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: JDK 17 설치
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'adopt'
      # Gradle 종속성 캐싱하여 빌드 속도를 높임
      - name: Gradle 캐싱
        uses: actions/cache@v3
        with: 
          path: | 
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # .gitignore로 업로드를 막은 application-dev.yml 파일 secrets에서 가져와서 생성/주입 하기 
      - name: application-dev.yml 생성/주입 
        run: |
          cd ./src/main/resources
          touch ./application-dev.yml
          echo "${{ secrets.APPLICATION_DEV }}" > ./application-dev.yml
        shell: bash

      - name: Gradle 빌드를 위해 gradlew에 실행 권한 부여
        run: chmod +x gradlew

      - name: Gradle로 빌드 하기 (테스트 코드 성공 여부 x)
        run: ./gradlew clean build -x test

      # 빌드 파일 .zip으로 압축하기
      - name: 빌드 파일 .zip으로 압축하기
        run: |
          mkdir deploy
          cp ./build/libs/*.jar ./deploy/
          cp ./Dockerfile ./deploy/
          cp ./scripts/*.sh ./deploy/
          cp ./appspec.yml ./deploy/
          zip -r -qq -j "./$GITHUB_SHA.zip" ./deploy

      - name: AWS Credentials 설정  
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id : ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      #- name: Upload to S3
      #  run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip ${{ secrets.S3URL }}/$GITHUB_SHA.zip

      - name: 압축된 빌드 파일 이름 지정 하기 (액션 순번 기입)
        id: filename
        run: echo "::set-output name=name::${{ github.run_number }}-$GITHUB_SHA.zip"

      - name: 압축된 빌드 파일 S3에 업로드 하기 
        run: aws s3 cp --region ap-northeast-2 "./$GITHUB_SHA.zip" "${{ secrets.S3URL }}/${{ steps.filename.outputs.name }}"

      # Codedeploy
      - name: Code Deploy
        #run: aws deploy create-deployment --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name dpg-dayoffmanager  --s3-location bucket=${{ env.S3_BUCKET_NAME }},bundleType=zip,key=${{ steps.filename.outputs.name }}.zip
        run: aws deploy create-deployment --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name dpg-dayoffmanager --s3-location bucket=${{ env.S3_BUCKET_NAME }},bundleType=zip,key="${{ steps.filename.outputs.name }}"

